(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(2),o=t(6),s=(t(0),t(120)),r={id:"advance_jq",title:"Implementing JQ equivalent in Deno",sidebar_label:"Implementing JQ"},l={id:"advance_jq",title:"Implementing JQ equivalent in Deno",description:"jq is like sed for JSON data, you can use it to slice and filter and map and transform structured data",source:"@site/website/advance_jq.md",permalink:"/deno-by-example/docs/advance_jq",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/website/advance_jq.md",sidebar_label:"Implementing JQ",sidebar:"someSidebar",previous:{title:"Variables and Constants",permalink:"/deno-by-example/docs/05_variables_constants"}},c=[{value:"How to create a stdin",id:"how-to-create-a-stdin",children:[]},{value:"How to read stdin in Deno.",id:"how-to-read-stdin-in-deno",children:[]},{value:"Parsing JSON",id:"parsing-json",children:[]}],i={rightToc:c};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"jq is like ",Object(s.b)("inlineCode",{parentName:"p"},"sed")," for JSON data, you can use it to slice and filter and map and transform structured data"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"-- https://stedolan.github.io/jq/")),Object(s.b)("p",null,"I am not going to create the entire library here. Instead, I will just give a small demo how you can read STDIN data using Deno and parse it."),Object(s.b)("p",null,"STDIN ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)"}),"Standard input Stream"),", Standard input is a stream from which a program reads its input data."),Object(s.b)("h2",{id:"how-to-create-a-stdin"},"How to create a stdin"),Object(s.b)("p",null,"Passing data as stdin is very easy. You can use ",Object(s.b)("inlineCode",{parentName:"p"},"<")," to pipe data to any program."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Example:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'deno run program.ts < file_name.txt\ndeno run programe.ts < echo "data here"\n')),Object(s.b)("p",null,"You can also pass the output of any program to the other program using pipe",Object(s.b)("inlineCode",{parentName:"p"},"(|)"),".\n",Object(s.b)("strong",{parentName:"p"},"Example:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'cat file_name.txt | deno run program.ts\necho "data here" | deno run programe.ts\n')),Object(s.b)("h2",{id:"how-to-read-stdin-in-deno"},"How to read stdin in Deno."),Object(s.b)("p",null,"Reading stdin is very similar to reding and stream in Deno. Deno provides core API like ",Object(s.b)("inlineCode",{parentName:"p"},"Deno.read")," and ",Object(s.b)("inlineCode",{parentName:"p"},"Deno.readAll")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// examples/advance_jq.ts\n\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconsole.log(stdinContent);\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Run:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"deno run examples/advance_jq.ts < examples/advance_jq.ts\n")),Object(s.b)("p",null,"When you run this program, This will print some numbers (",Object(s.b)("inlineCode",{parentName:"p"},"Uint8Array"),"). Like other languages, stream data is buffer data encoded in buffer. To convert we need ",Object(s.b)("inlineCode",{parentName:"p"},"TextDecoder"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// examples/advance_jq.ts\n\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\nconsole.log(response);\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Run:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"deno run examples/advance_jq.ts < examples/advance_jq.ts\n")),Object(s.b)("p",null,"You can see you file data as output"),Object(s.b)("h2",{id:"parsing-json"},"Parsing JSON"),Object(s.b)("p",null,"Parsing JSON and extracting value is a very tedious task. I have written a basic Extract value from an object based on key provided. Code look as below:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const evalReg = /(\\.)|(\\[(\\d)\\])/;\nconst safeEval = (key: string, obj: any) => {\n  let lastKey;\n  let match;\n  do {\n    if (lastKey) {\n      if (match && match[2]) {\n        obj = obj[lastKey][match[3]];\n      } else {\n        obj = obj[lastKey];\n      }\n    }\n    match = evalReg.exec(key);\n    if (!match) {\n      lastKey = key;\n      break;\n    } else {\n      lastKey = key.substr(0, match.index);\n      key = key.slice(!match[3] ? match.index + 1 : match.index + 3);\n    }\n  } while (match);\n  if (lastKey) {\n    obj = obj[lastKey];\n  }\n  return obj;\n};\n")),Object(s.b)("p",null,"Here i am using ",Object(s.b)("inlineCode",{parentName:"p"},"RegExp.exec"),Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"}),"more")," method to parse the key and extract tokens. This is a very rough sample of what JQ can do. So ",Object(s.b)("inlineCode",{parentName:"p"},"safeEvel")," code is also small \ud83d\ude01."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"How this method works:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'const obj = {\n  id: 1,\n  version: "1.0.1",\n  contributors: ["deepak", "gary"],\n  actor: {\n    name: "Tom Cruise",\n    age: 56,\n    "Born At": "Syracuse, NY",\n    Birthdate: "July 3 1962",\n    movies: ["Top Gun", "Mission: Impossible", "Oblivion"],\n    photo: "https://jsonformatter.org/img/tom-cruise.jpg",\n  },\n};\nconsole.log(JSON.stringify(obj, null, 2));\nconsole.log(safeEval("id", obj));\nconsole.log(safeEval("contributors", obj));\nconsole.log(safeEval("contributors[1]", obj));\nconsole.log(safeEval("actor.movies[2]", obj));\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"OUTPUT:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'1\n[ "deepak", "gary" ]\ngary\nOblivion\n')),Object(s.b)("p",null,"As you can see, this is very much what we need. Let's complete the actual demo."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"[Note:]")," Thanks to Deno ",Object(s.b)("inlineCode",{parentName:"p"},"import"),", now i can use this file from github directly. I don't need to create another file to import. You can do that. However, I will use network to ",Object(s.b)("inlineCode",{parentName:"p"},"import"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import safeEval from "https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/safe_eval.ts";\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\n\ntry {\n  console.log(safeEval(key, JSON.parse(response)));\n} catch (err) {\n  console.log(response);\n}\n')),Object(s.b)("p",null,"But wait, from where we will get missing key ??"),Object(s.b)("p",null,Object(s.b)("img",Object(a.a)({parentName:"p"},{src:"https://images.unsplash.com/photo-1529247833802-700f53170380?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&h=300&q=80",alt:"alt text"}))),Object(s.b)("p",null,"(c) Photo by Paolo Nicolello on Unsplash"),Object(s.b)("p",null,"Deno provides direct access to arguments passed to programs using CLI. We can use ",Object(s.b)("inlineCode",{parentName:"p"},"Deno.args")," to get all the arguments passed to programs as an Array. Let's use it."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'import safeEval from "https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/safe_eval.ts";\nconst stdinContent = await Deno.readAll(Deno.stdin);\nconst response = new TextDecoder().decode(stdinContent);\n\nconst [key = ""] = Deno.args;\ntry {\n  console.log(safeEval(key, JSON.parse(response)));\n} catch (err) {\n  console.log(response);\n}\n')),Object(s.b)("p",null,"You can create a json(tom.json) and tryout."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'/* tom.json */\n{\n  "id": 1,\n  "version": "1.0.1",\n  "contributors": ["deepak", "gary"],\n  "actor": {\n    "name": "Tom Cruise",\n    "age": 56,\n    "Born At": "Syracuse, NY",\n    "Birthdate": "July 3 1962",\n    "movies": ["Top Gun", "Mission: Impossible", "Oblivion"],\n    "photo": "https://jsonformatter.org/img/tom-cruise.jpg"\n  }\n}\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Run:")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ deno run examples/advance_jq.ts "id" < examples/tom.json\n## 1\n\n$ deno run examples/advance_jq.ts "actor.name" < examples/tom.json\n## Tom Cruise\n')),Object(s.b)("p",null,"Perfect: Let's try with curl"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'curl -s -k https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/examples/tom.json | deno run  examples/advance_jq.ts "actor.movies[1]"\n')),Object(s.b)("p",null,"Output: Mission: Impossible"),Object(s.b)("p",null,"Nice! Mission: I am possible"),Object(s.b)("p",null,"For more example, visit:\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://deepakshrma.github.io/deno-by-example/"}),"https://deepakshrma.github.io/deno-by-example/")),Object(s.b)("p",null,"Read More: ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts#Deno.readAll"}),"Deno.readAll")))}p.isMDXComponent=!0}}]);