(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),o=n(6),r=(n(0),n(78)),s={id:"advanced-react-ssr",title:"Deno Server Side Render- Isomorphic App",description:"Create a SSR/Isomorphic app using Deno without webpack",sidebar_label:"Isomorphic App",author:"Deepak Vishwakarma",author_url:"https://medium.com/@deepak_v",author_image_url:"https://avatars2.githubusercontent.com/u/7682731?s=400&u=c00b541729efd28e967271c37b4bd779d4ef94c7&v=4",tags:["deno","ssr","isomorphic","server-side-render","bundle"],image:"https://source.unsplash.com/c_Hi3DzlC0g/1600x900"},i={unversionedId:"advanced-react-ssr",id:"advanced-react-ssr",isDocsHomePage:!1,title:"Deno Server Side Render- Isomorphic App",description:"Create a SSR/Isomorphic app using Deno without webpack",source:"@site/docs/advanced_react_ssr.md",permalink:"/deno-by-example/advanced-react-ssr",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/docs/advanced_react_ssr.md",sidebar_label:"Isomorphic App",sidebar:"someSidebar",previous:{title:"Build a CLI tool | Deno CLI `minifind`",permalink:"/deno-by-example/advanced-cli-minifind"},next:{title:"Take input from user | Lottery Game",permalink:"/deno-by-example/lottery-game"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Set-up",id:"set-up",children:[{value:"Start with npm init",id:"start-with-npm-init",children:[]}]},{value:"Backend",id:"backend",children:[{value:"Add React Server Render",id:"add-react-server-render",children:[]},{value:"Adding Server Controller- Create Backend APIs",id:"adding-server-controller--create-backend-apis",children:[]}]},{value:"Client Side App",id:"client-side-app",children:[{value:"Add List Todos to React App",id:"add-list-todos-to-react-app",children:[]},{value:"Adding delete functionality on client-side",id:"adding-delete-functionality-on-client-side",children:[]}]},{value:"Final Touch",id:"final-touch",children:[{value:"Initialize initial state",id:"initialize-initial-state",children:[]}]},{value:"Final Domo",id:"final-domo",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Setting up an SSR app is a pain in nodejs. There are many scaffolds available for nodejs. But it comes with its own tech-depth and learning curves. This also includes hidden configurations of webpack."),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://memegenerator.net/img/instances/81660209.jpg",alt:"webpack"}))),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"According to the wiki, An isomorphic JavaScript(also known as Universal JavaScript) is described as JavaScript applications that run both on the client and the server.\n")),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://assets.hardwarezone.com/img/2020/07/tenet.jpg",alt:"tenet"}))),Object(r.b)("p",null,"If I say, you can build an entire ",Object(r.b)("inlineCode",{parentName:"p"},"SSR")," without setting up installing any ",Object(r.b)("inlineCode",{parentName:"p"},"external node js")," dependency. ",Object(r.b)("strong",{parentName:"p"},"Would you believe it?")," I guess ",Object(r.b)("inlineCode",{parentName:"p"},"NO"),". However, In this tutorial, I will explain how to set up a ",Object(r.b)("inlineCode",{parentName:"p"},"simple SSR")," app without installing a ",Object(r.b)("inlineCode",{parentName:"p"},"single nodejs library")," or ",Object(r.b)("inlineCode",{parentName:"p"},"bundler"),". That also including a hydrate react app(isomorphic app)."),Object(r.b)("p",null,"Let's begin."),Object(r.b)("img",{width:"400",src:"https://pbs.twimg.com/profile_images/1078262307661111297/R_XwpK5f.jpg"}),Object(r.b)("h2",{id:"set-up"},"Set-up"),Object(r.b)("h3",{id:"start-with-npm-init"},"Start with npm init"),Object(r.b)("p",null,"Don't be afraid, We will not install any nodejs library. However, I still like ",Object(r.b)("inlineCode",{parentName:"p"},"npm")," as task runner. So let's use it. Create a folder ",Object(r.b)("inlineCode",{parentName:"p"},"ssr")," and init npm package.json"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"md -p examples/ssr\n\ncd examples/ssr\n## init\nnpm init --y\n")),Object(r.b)("h2",{id:"backend"},"Backend"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Add Basic deno server:")," Create ",Object(r.b)("inlineCode",{parentName:"p"},"server.tsx")," file and add below code"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'}),'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction handlePage(ctx: any) {\n  try {\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root"><h1>Hello SSR</h1></div>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"We will use ",Object(r.b)("inlineCode",{parentName:"p"},"oak")," module here to create ",Object(r.b)("inlineCode",{parentName:"p"},"Deno")," server. You can create your own server. For that read my article ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://decipher.dev/deno-by-example/advanced-routing"}),"Creating Routing/Controller in Deno Server(From Scratch)")))),Object(r.b)("p",null,"Add below command in ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"{2}","{2}":!0}),'"scripts": {\n    "start": "deno run --allow-net server.ts",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Run:"),"\nNow you can run the app and verify on ",Object(r.b)("inlineCode",{parentName:"p"},"http://localhost:8000/"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm run start\n")),Object(r.b)("h3",{id:"add-react-server-render"},"Add React Server Render"),Object(r.b)("p",null,"Now you can run the Now let's add our first server-side rendering code. For that we need reactjs. Since Deno is mean to use TypeScript. We will not use node_modules for that. We will you cdn hosted version of ",Object(r.b)("inlineCode",{parentName:"p"},"react")," and ",Object(r.b)("inlineCode",{parentName:"p"},"react-dom"),". For that, we will use ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://jspm.org/"}),"https://jspm.org/"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"jspm provides a module CDN allowing any package from npm to be directly loaded in the the browser and other JS environments as a fully optimized native JavaScript module.\n")),Object(r.b)("p",null,"Since we are going to write some TSX syntax(TypeScript JSX). We have to change the file extension of ",Object(r.b)("inlineCode",{parentName:"p"},"server.ts")," to ",Object(r.b)("inlineCode",{parentName:"p"},"tsx"),". Let's do that and update ",Object(r.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"mv server.ts server.tsx\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"{2}","{2}":!0}),'"scripts": {\n    "start": "deno run --allow-net server.tsx",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Add below lines in ",Object(r.b)("inlineCode",{parentName:"strong"},"server.tsx"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx" {3,4,17-19,22,31}',title:'"server.tsx"',"{3,4,17-19,22,31}":!0}),'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nimport React from "https://dev.jspm.io/react@16.13.1";\nimport ReactDomServer from "https://dev.jspm.io/react-dom@16.13.1/server";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction App() {\n  return <h1>Hello SSR</h1>;\n}\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDomServer.renderToString(<App />);\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n')),Object(r.b)("p",null,"Run the app again. You will see ",Object(r.b)("inlineCode",{parentName:"p"},"error")," on ",Object(r.b)("inlineCode",{parentName:"p"},"console"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"TS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\n  return <h1>Hello SSR</h1>;\n")),Object(r.b)("p",null,"This error due to missing ",Object(r.b)("inlineCode",{parentName:"p"},"typings")," for ",Object(r.b)("inlineCode",{parentName:"p"},"react"),". Since we do not included ",Object(r.b)("inlineCode",{parentName:"p"},"types")," for react. We have to let know ",Object(r.b)("inlineCode",{parentName:"p"},"typescript compliler"),". How it should treat JSX(TSX) syntax. To ",Object(r.b)("inlineCode",{parentName:"p"},"bypass")," these errors, Add below lines."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx" {3-5}',title:'"server.tsx"',"{3-5}":!0}),"declare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [key: string]: any;\n    }\n  }\n}\nfunction App() {\n  return <h1>Hello SSR</h1>;\n}\n")),Object(r.b)("p",null,"Now run the server again. Your first ",Object(r.b)("inlineCode",{parentName:"p"},"React SSR")," will be visible on browser. Nice!"),Object(r.b)("h3",{id:"adding-server-controller--create-backend-apis"},"Adding Server Controller- Create Backend APIs"),Object(r.b)("p",null,"Let's move and start adding some core features. Let's add some ",Object(r.b)("inlineCode",{parentName:"p"},"server-side")," data to our app to consume in ",Object(r.b)("inlineCode",{parentName:"p"},"client-side"),". For that we will include few routes on ",Object(r.b)("inlineCode",{parentName:"p"},"Oak Server"),". ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/oakserver/oak"}),"Oak")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'}),'const router = new Router();\nrouter.get("/", handlePage);\n\nlet todos: Map<number, any> = new Map();\n\nfunction init() {\n  todos.set(todos.size + 1, { id: Date.now(), task: "build an ssr deno app" });\n  todos.set(todos.size + 1, {\n    id: Date.now(),\n    task: "write blogs on deno ssr",\n  });\n}\ninit();\nrouter\n  .get("/todos", (context) => {\n    context.response.body = Array.from(todos.values());\n  })\n  .get("/todos/:id", (context) => {\n    if (\n      context.params &&\n      context.params.id &&\n      todos.has(Number(context.params.id))\n    ) {\n      context.response.body = todos.get(Number(context.params.id));\n    } else {\n      context.response.status = 404;\n    }\n  })\n  .post("/todos", async (context) => {\n    const body = context.request.body();\n    if (body.type === "json") {\n      const todo = await body.value;\n      todos.set(Date.now(), todo);\n    }\n    context.response.body = { status: "OK" };\n  });\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n')),Object(r.b)("p",null,"Here in the above code, We have created three routes."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"GET ",Object(r.b)("inlineCode",{parentName:"li"},"/todos/")," to get a list of the todos"),Object(r.b)("li",{parentName:"ol"},"GET ",Object(r.b)("inlineCode",{parentName:"li"},"/todos/:id")," to todo by id"),Object(r.b)("li",{parentName:"ol"},"POST ",Object(r.b)("inlineCode",{parentName:"li"},"/todos/")," create a new todo")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"function init()")," to create some initial dummy todos. You can use postman to try-out get and post data."),Object(r.b)("h2",{id:"client-side-app"},"Client Side App"),Object(r.b)("h3",{id:"add-list-todos-to-react-app"},"Add List Todos to React App"),Object(r.b)("p",null,"Since now we have api to create todos and consume todos. Let's list down all this on our react app. For that add below mentioned code."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'}),'function App() {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={Array.from(todos.values())} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ListTodos({ items = [] }: any) {\n  return (\n    <>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          return (\n            <li key={index} className="list-group-item">\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDomServer.renderToString(<App />);\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">\n    <title>Document</title>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n  </body>\n  </html>`;\n')),Object(r.b)("p",null,"Do all the changes and ",Object(r.b)("inlineCode",{parentName:"p"},"run app"),". You will see ",Object(r.b)("inlineCode",{parentName:"p"},"list of Todo's")," containing two rows of initial data. You can use post data to route ",Object(r.b)("inlineCode",{parentName:"p"},"POST/todos/")," to create new records. Once you add post ",Object(r.b)("inlineCode",{parentName:"p"},"refresh")," the page, You will see added new post data."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash",metastring:'title="post data using curl"',title:'"post',data:!0,using:!0,'curl"':!0}),'curl --header "Content-Type: application/json" \\\n  --request POST \\\n  --data \'{"task":"Create postman script"}\' \\\n  http://localhost:8000/todos/\n')),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"bootstrap")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you noticed, I have added basic bootstrap to make UI nicer. You can use some other css library."))),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/todo_app_1.png",alt:"todo png"}))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"Tada! Now you have running the SSR app. You can replace the in-memory todos store to any persistent database. The result will be the same.\n")),Object(r.b)("p",null,"Time to add some interactive behavior in Our react app(client-side). But before doing that, let's move our react code to some separate file ",Object(r.b)("inlineCode",{parentName:"p"},"app.tsx"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Create a file ",Object(r.b)("inlineCode",{parentName:"strong"},"app.tsx"),":")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="app.tsx"',title:'"app.tsx"'}),'import React from "https://dev.jspm.io/react@16.13.1";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [key: string]: any;\n    }\n  }\n}\n\nfunction App({ todos = [] }: any) {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={todos} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ListTodos({ items = [] }: any) {\n  return (\n    <>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          return (\n            <li key={index} className="list-group-item">\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\nexport default App;\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Notice the change in ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"App"))," function. Since we do not have direct access to ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"todos"))," now. We need to pass as props while rendering it. Corresponding changes have been done for ",Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"ListTodos")),"."))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx" {3,10}',title:'"server.tsx"',"{3,10}":!0}),'import React from "https://dev.jspm.io/react@16.13.1";\nimport ReactDomServer from "https://dev.jspm.io/react-dom@16.13.1/server";\nimport App from "./app.tsx";\n\n/// rest of the code\n\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDomServer.renderToString(\n      <App todos={Array.from(todos.values())} /> // change here to pass todos as props\n    );\n\n  // rest of the code\n}\n')),Object(r.b)("p",null,"Run the app and see changes on the browser, If all good there will be no change in the final output."),Object(r.b)("h3",{id:"adding-delete-functionality-on-client-side"},"Adding delete functionality on client-side"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="app.tsx" {10}',title:'"app.tsx"',"{10}":!0}),'function ListTodos({ items = [] }: any) {\n  const [deletedIdxs, setDeletedIdxs] = (React as any).useState([]);\n  return (\n    <>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          const deleted = deletedIdxs.indexOf(index) !== -1;\n          return (\n            <li\n              key={index}\n              className="list-group-item"\n              style={{ color: deleted && "red" }}\n            >\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n                onClick={() => setDeletedIdxs([...deletedIdxs, index])}\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n')),Object(r.b)("p",null,"Once you do the above changes and try to delete by clicking on ",Object(r.b)("inlineCode",{parentName:"p"},"cross-button"),". You will see no change in UI. By code, it should turn the element ",Object(r.b)("inlineCode",{parentName:"p"},"color to red"),". So what could be the reason for that?"),Object(r.b)("h4",{id:"answer-hydrate"},"Answer: Hydrate"),Object(r.b)("p",null,"Since we are using ",Object(r.b)("inlineCode",{parentName:"p"},"ReactDomServer.renderToString")," the library which converts react app to string. So we lose all JS capabilities. To re-enable react js on the client-side. For that React provides you Hydrate module(API). This hydrate API re-enable the react feature on the client-side again. This makes our app ",Object(r.b)("inlineCode",{parentName:"p"},"Isomorphic app"),". More: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/react-dom.html#hydrate"}),"Hydrate")),Object(r.b)("p",null,"Adding hydrate is a tough task. But Awsome Deno shines well here too. Deno provides Bundle API to convert a script to js. We will use ",Object(r.b)("inlineCode",{parentName:"p"},"Deno.bundle")," to create hydrate js for the client-side."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Create a new file ",Object(r.b)("inlineCode",{parentName:"strong"},"client.tsx")," and add below codes:")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="client.tsx"',title:'"client.tsx"'}),'import React from "https://dev.jspm.io/react@16.13.1";\nimport ReactDom from "https://dev.jspm.io/react-dom@16.13.1";\n\nimport App from "./app.tsx";\n\n(ReactDom as any).hydrate(<App todos={[]} />, document.getElementById("root"));\n')),Object(r.b)("p",null,"Add below codes to compile and convert ",Object(r.b)("inlineCode",{parentName:"p"},"client.tsx")," to serve as a route in our server."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="server.tsx"',title:'"server.tsx"'}),'\n// initial code\nconst [_, clientJS] = await Deno.bundle("./client.tsx");\n\nconst serverrouter = new Router();\nserverrouter.get("/static/client.js", (context) => {\n  context.response.headers.set("Content-Type", "text/html");\n  context.response.body = clientJS;\n});\napp.use(router.routes());\napp.use(serverrouter.routes());\n// rest of the code\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDomServer.renderToString(\n      <App todos={Array.from(todos.values())} /> // change here to pass todos as props\n    );\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n    \x3c!--Rest of the code --\x3e\n    <div id="root">${body}</div>\n    <script  src="http://localhost:8000/static/client.js" defer><\/script>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n')),Object(r.b)("p",null,"Since we are using unstable API ",Object(r.b)("inlineCode",{parentName:"p"},"deno.bundle"),", You have to update ",Object(r.b)("inlineCode",{parentName:"p"},"package.json")," and add more flags. Same time, We are using DOM with typescript. So we have to add custom ",Object(r.b)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="package.json"',title:'"package.json"'}),'{\n  "scripts": {\n    "start": "deno run --allow-net --allow-read --unstable server.tsx -c tsconfig.json",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  }\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'}),"{\n  \"compilerOptions\": {\n    \"target\": \"es6\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n    \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n    \"lib\": [\n      \"DOM\",\n      \"ES2017\",\n      \"deno.ns\"\n    ] /* Specify library files to be included in the compilation. */,\n    \"strict\": true /* Enable all strict type-checking options. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n    \"skipLibCheck\": true /* Skip type checking of declaration files. */,\n    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n  }\n}\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You can use ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://deno.land/manual/tools/bundler"}),"bundler")," as CLI to convert ",Object(r.b)("inlineCode",{parentName:"p"},"client.tsx")," before even starting the server. However, I just wanna show a cool way of doing it. So I use ",Object(r.b)("inlineCode",{parentName:"p"},"Deno.bundle"),"."))),Object(r.b)("h2",{id:"final-touch"},"Final Touch"),Object(r.b)("h3",{id:"initialize-initial-state"},"Initialize initial state"),Object(r.b)("p",null,"Once you do all the above-mentioned changes, Re-Run app. You will notice the list is the visible and hidden same time. This is because we react hydrate start working and it is trying to re-initialize the app. So all the data we render from the server is gone. to persist data we need to pass those data as application initial data. There are a lot of patterns to pass initial data. We will use the simple window global data."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Let's Add data on the window")," make below changes on given files."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js",metastring:'title="server.tsx" {4,9-11}',title:'"server.tsx"',"{4,9-11}":!0}),'function handlePage(ctx: any) {\n  try {\n    const body = ReactDomServer.renderToString(\n      <App todos={[]} />\n    );\n    ctx.response.body = `<!DOCTYPE html>\n    <title>Document</title>\n    <script>\n      window.__INITIAL_STATE__ = {"todos": ${JSON.stringify(\n        Array.from(todos.values())\n      )}};\n    <\/script>\n  </head>\n\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="client.tsx"',title:'"client.tsx"'}),'// initial codes\ndeclare global {\n  var __INITIAL_STATE__: any;\n}\nimport App from "./app.tsx";\nconst { todos } = window.__INITIAL_STATE__ || { todos: [] };\n(ReactDom as any).hydrate(\n  <App todos={todos} />,\n  document.getElementById("root")\n);\n')),Object(r.b)("p",null,"After the changes, all the files will look as below."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="app.tsx"',title:'"app.tsx"'}),'import React from "https://dev.jspm.io/react@16.13.1";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [key: string]: any;\n    }\n  }\n}\n\nfunction App({ todos = [] }: any) {\n  return (\n    <div>\n      <div className="jumbotron jumbotron-fluid">\n        <div className="container">\n          <h1 className="display-4">ToDo\'s App</h1>\n          <p className="lead">This is our simple todo app.</p>\n          <ListTodos items={todos} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ListTodos({ items = [] }: any) {\n  const [deletedIdxs, setDeletedIdxs] = (React as any).useState([]);\n  return (\n    <>\n      <ul className="list-group">\n        {items.map((todo: any, index: number) => {\n          const deleted = deletedIdxs.indexOf(index) !== -1;\n          return (\n            <li\n              key={index}\n              className="list-group-item"\n              style={{ color: deleted && "red" }}\n            >\n              {todo.task}\n              <button\n                type="button"\n                className="ml-2 mb-1 close"\n                aria-label="Close"\n                onClick={() => setDeletedIdxs([...deletedIdxs, index])}\n              >\n                <span aria-hidden="true">&times;</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="client.tsx"',title:'"client.tsx"'}),'import React from "https://dev.jspm.io/react@16.13.1";\nimport ReactDom from "https://dev.jspm.io/react-dom@16.13.1";\ndeclare global {\n  var __INITIAL_STATE__: any;\n}\nimport App from "./app.tsx";\nconst { todos } = window.__INITIAL_STATE__ || { todos: [] };\n(ReactDom as any).hydrate(\n  <App todos={todos} />,\n  document.getElementById("root")\n);\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx",metastring:'title="server.tsx"',title:'"server.tsx"'}),'import { Application, Router } from "https://deno.land/x/oak@v6.0.1/mod.ts";\n\nimport React from "https://dev.jspm.io/react@16.13.1";\nimport ReactDomServer from "https://dev.jspm.io/react-dom@16.13.1/server";\nimport App from "./app.tsx";\n\nconst app = new Application();\n\nconst router = new Router();\nrouter.get("/", handlePage);\n\nlet todos: Map<number, any> = new Map();\n\nfunction init() {\n  todos.set(todos.size + 1, { id: Date.now(), task: "build an ssr deno app" });\n  todos.set(todos.size + 1, {\n    id: Date.now(),\n    task: "write blogs on deno ssr",\n  });\n}\ninit();\nrouter\n  .get("/todos", (context) => {\n    context.response.body = Array.from(todos.values());\n  })\n  .get("/todos/:id", (context) => {\n    if (\n      context.params &&\n      context.params.id &&\n      todos.has(Number(context.params.id))\n    ) {\n      context.response.body = todos.get(Number(context.params.id));\n    } else {\n      context.response.status = 404;\n    }\n  })\n  .post("/todos", async (context) => {\n    const body = context.request.body();\n    if (body.type === "json") {\n      const todo = await body.value;\n      todos.set(Date.now(), todo);\n    }\n    context.response.body = { status: "OK" };\n  });\n\nconst [_, clientJS] = await Deno.bundle("./client.tsx");\n\nconst serverrouter = new Router();\nserverrouter.get("/static/client.js", (context) => {\n  context.response.headers.set("Content-Type", "text/html");\n  context.response.body = clientJS;\n});\napp.use(router.routes());\napp.use(serverrouter.routes());\n\napp.use(router.allowedMethods());\n\nconsole.log("server is running on http://localhost:8000/");\nawait app.listen({ port: 8000 });\n\nfunction handlePage(ctx: any) {\n  try {\n    const body = ReactDomServer.renderToString(\n      <App todos={[]} /> // change here to pass todos as props\n    );\n    ctx.response.body = `<!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">\n    <title>Document</title>\n    <script>\n      window.__INITIAL_STATE__ = {"todos": ${JSON.stringify(\n        Array.from(todos.values())\n      )}};\n    <\/script>\n  </head>\n  <body >\n    <div id="root">${body}</div>\n    <script  src="http://localhost:8000/static/client.js" defer><\/script>\n  </body>\n  </html>`;\n  } catch (error) {\n    console.error(error);\n  }\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="package.json"',title:'"package.json"'}),'{\n  "name": "deno-react-ssr",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "start": "deno run --allow-net --allow-read --unstable server.tsx -c tsconfig.json",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n')),Object(r.b)("p",null,"Now you have running, Working SSR/Isomorphic App. Fully written in Deno Without any nodejs/npm module and IceBerg of webpack."),Object(r.b)("p",null,"Thanks for reading this tutorial. Please follow me on medium to support me. For more of my work, check-out my website ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://decipher.dev/"}),"https://decipher.dev/"),"."),Object(r.b)("p",null,"You can find all the code in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/deepakshrma/deno-by-example/tree/master/examples"}),"examples")," folder of the Github repo."),Object(r.b)("h2",{id:"final-domo"},"Final Domo"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/deepakshrma/deno-by-example/master/static/img/todo_demo.gif",alt:"todo gif"}))))}p.isMDXComponent=!0},78:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,u=d["".concat(s,".").concat(m)]||d[m]||b[m]||r;return n?o.a.createElement(u,i(i({ref:t},l),{},{components:n})):o.a.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);