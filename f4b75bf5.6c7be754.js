(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{114:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return m}));var o=t(2),a=t(6),r=(t(0),t(120)),s={id:"03_numbers",title:"Numbers",sidebar_label:"Numbers"},l={id:"03_numbers",title:"Numbers",description:"Since deno is supporting Typescript which is super-set of the JavaScript. It support all the syntax from the JavaScript. However, Deno is a more then that. It also support APIs for file reading and network and etc.",source:"@site/website/03_numbers.md",permalink:"/deno-by-example/03_numbers",editUrl:"https://github.com/deepakshrma/deno-by-example/edit/master/website/03_numbers.md",sidebar_label:"Numbers",sidebar:"someSidebar",previous:{title:"Greet From CLI",permalink:"/deno-by-example/02_greet_from_cli"},next:{title:"Variables and Constants",permalink:"/deno-by-example/05_variables_constants"}},b=[],i={rightToc:b};function m(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Since deno is supporting Typescript which is super-set of the JavaScript. It support all the syntax from the JavaScript. However, Deno is a more then that. It also support APIs for file reading and network and etc."),Object(r.b)("p",null,"Here below are some examples, that explains how numbers behave in Deno","[Javascript]","."),Object(r.b)("p",null,"There are some Gotcha in Number as it is in JavaScript."),Object(r.b)("p",null,"Sample:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'function main() {\n  const num = 10;\n  const num2: number = 20; // same as above but declarative\n\n  let num3: number;\n  num3 = num + num2;\n  console.log(num3);\n\n  // num3 = num + "20" // Error, Type \'string\' is not assignable to type \'number\'\n  num3 = num + Number("20"); // No error, cast string to number\n  console.log(num3);\n\n  num3 = num + parseInt("20", 10); // same as above\n\n  console.log(num3);\n\n  let flt = 10.0;\n\n  console.log(flt === 10); // true\n\n  console.log(flt === 10.1); // false\n\n  console.log(typeof flt, typeof 10); //number number\n\n  console.log(typeof NaN, typeof Infinity, typeof -Infinity); // number number number\n\n  console.log(NaN === NaN); // false\n\n  console.log(1.2 + 1.8); // 3 NOT 3.0\n\n  console.log(1.2 + 1.8 === 3); // true\n}\nmain();\n')),Object(r.b)("p",null,"Things to be noted as in JS, deno also has same number for int and float number. NaN, Infinity are some special NaN."),Object(r.b)("p",null,"More:"),Object(r.b)("p",null,Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"}),"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number")),Object(r.b)("p",null,"How to run example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"deno run examples/03_numbers.ts\n")))}m.isMDXComponent=!0}}]);